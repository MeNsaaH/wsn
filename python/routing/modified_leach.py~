import logging, sys
import config as cf

from python.network.network import *
from python.network.cluster import *
from python.routing.routing_protocol import *

# Stores the details of the current clusters
# We want to be able to reus the previous clusters as opposed to LEACH
# which create new clusters on each round
clusters = []

# TODO
# Get average Cluster Energy
# Check for alive nodes with energy >= aveEnergy
# Get Highest energy level nodes
# Apply  MODIFIED_LEACH Algorithm on remaining nodes
class MODIFIED_LEACH(RoutingProtocol):

  def _setup_phase_cluster(self, network, round_nb=None, cluster=None):
    """The clusters members decides which nodes are cluster heads depending on 
    algorithm
    In subsequent rounds, the clusters decides the cluster heads

    TODO: Add Reference to Paper
    """
    logging.info('MODIFIED_LEACH: setup phase by Clusters.')
    # decide which network are cluster heads
    global clusters
    # When clusters themselves selects clusterhead, the reuse their cluster strucuter
    # and pick a new cluster from amongst the cluster members

    logging.info('MODIFIED_LEACH: deciding which nodes are new cluster heads.')
    idx = 0
    for cluster in clusters:
      # If cluster is ineffective i.e no of active nodes is less than
      # 1/4 of original cluster member, base station reshuffle cluster
      if cluster.is_cluster_ineffective:
        self._setup_phase_base_station(network, round_nb)
        break
      cluster.select_new_CH()

  def _setup_phase_base_station(self, network, round_nb=None):
    """The base station decides which nodes are cluster heads in the first round
    round, depending on a probability. Then it broadcasts this information
    to all network.
    In subsequent rounds, the clusters decides the cluster heads

    TODO: Add Reference to Paper
    """
    logging.info('MODIFIED_LEACH: setup phase base Station.')
    # decide which network are cluster heads
    prob_ch = float(cf.NB_CLUSTERS)/float(cf.NB_NODES)
    heads = []

    # When the base station selects clusters, the previous clusters are destroyed
    # and new ones created
    global clusters
    clusters = []
    alive_nodes = network.get_alive_nodes()
    logging.info('MODIFIED_LEACH: deciding which nodes are cluster heads.')
    idx = 0
    while len(heads) != cf.NB_CLUSTERS:
      node = alive_nodes[idx]
      u_random = np.random.uniform(0, 1)
      # node will be a cluster head
      if u_random < prob_ch:
        node.next_hop = cf.BSID
        heads.append(node) 
        # Store Cluster information
        clusters.append(Cluster(idx, node))
      idx = idx+1 if idx < len(alive_nodes)-1 else 0
  
    # ordinary network choose nearest cluster heads
    logging.info('MODIFIED_LEACH: ordinary nodes choose nearest nearest cluster head')
    for node in alive_nodes:
      if node in heads: # node is cluster head
        continue
      nearest_head = heads[0]
      cluster = clusters[0]
      # find the nearest cluster head
      for idx, head in enumerate(heads[1:]):
        if calculate_distance(node, nearest_head) > calculate_distance(node, head):
          nearest_head = head
          cluster = clusters[idx+1]
  
      node.next_hop = nearest_head.id
      cluster.add_member(node)
  

  def setup_phase(self, network, round_nb=None):
      """ Setup phase varies depending on number of rounds. For the first round the 
      base station selects cluster heads for subsequent rounds, task of cluster head
      selection falls to cluster members
      """
      if round_nb == 0:
        self._setup_phase_base_station(network, round_nb)
      else: 
        self._setup_phase_cluster(network, round_nb)
      network.broadcast_next_hop()
